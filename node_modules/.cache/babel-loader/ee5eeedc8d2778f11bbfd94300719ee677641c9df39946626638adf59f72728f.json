{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\ticgame\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './styles.css';\n\n// 方块组件 - 代表井字棋盘中的单个格子\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick,\n  isWinning\n}) {\n  // isWinning: 是否是获胜组合中的方块，用于高亮显示\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `square ${isWinning ? 'winning-square' : ''}` // 动态添加获胜方块样式类\n    ,\n    onClick: onSquareClick // 点击事件处理\n    ,\n    children: [value, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n// 棋盘组件 - 管理3x3的方格布局和游戏逻辑\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  winningLine\n}) {\n  // winningLine: 获胜的三个方块索引数组，用于高亮显示\n\n  // 处理方块点击事件\n  function handleClick(i) {\n    // 如果游戏已结束（有获胜者）或方块已被占用，则不做任何操作\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    // 创建当前方块状态的副本（不可变性原则）\n    const nextSquares = squares.slice();\n\n    // 根据当前玩家设置方块值\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n\n    // 通知父组件更新游戏状态\n    onPlay(nextSquares);\n  }\n\n  // 渲染单个方块 - 使用循环替代硬编码\n  function renderSquare(i) {\n    // 检查当前方块是否属于获胜组合\n    const isWinningSquare = winningLine && winningLine.includes(i);\n    return /*#__PURE__*/_jsxDEV(Square, {\n      // React列表渲染必需的key属性\n      value: squares[i] // 方块显示的值\n      ,\n      onSquareClick: () => handleClick(i) // 点击事件处理函数\n      ,\n      isWinning: isWinningSquare // 是否为获胜方块\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n  // 使用嵌套循环渲染3x3棋盘（更优雅的实现方式）\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), Array(3).fill(null).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: Array(3).fill(null).map((_, colIndex) => {\n        const squareIndex = rowIndex * 3 + colIndex; // 计算方块在一维数组中的索引\n        return renderSquare(squareIndex); // 渲染单个方块\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n\n  // 计算当前游戏状态文本\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = '获胜者: ' + winner;\n  } else {\n    status = '下一位玩家: ' + (xIsNext ? 'X' : 'O');\n  }\n}\n\n// 辅助函数：计算井字棋获胜者\n_c2 = Board;\nfunction calculateWinner(squares) {\n  // 所有可能的获胜组合：横行、竖列、对角线\n  const lines = [[0, 1, 2],\n  // 第一行\n  [3, 4, 5],\n  // 第二行\n  [6, 7, 8],\n  // 第三行\n  [0, 3, 6],\n  // 第一列\n  [1, 4, 7],\n  // 第二列\n  [2, 5, 8],\n  // 第三列\n  [0, 4, 8],\n  // 主对角线\n  [2, 4, 6] // 副对角线\n  ];\n\n  // 遍历所有可能的获胜组合\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]; // 解构赋值获取三个方块索引\n\n    // 检查三个方块是否都有相同的非空值\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // 返回获胜者（X 或 O）\n    }\n  }\n  return null; // 没有获胜者\n}\n\n// 游戏主组件 - 管理整个游戏状态和历史记录\nexport default function Game() {\n  _s();\n  // 游戏状态管理\n  const [xIsNext, setXIsNext] = useState(true); // 下一位玩家是否为X\n  const [history, setHistory] = useState([Array(9).fill(null)]); // 游戏历史记录，初始为空棋盘\n  const [currentMove, setCurrentMove] = useState(0); // 当前查看的历史步骤\n  const [isAscending, setIsAscending] = useState(true); // 移动历史排序方式：true=升序，false=降序\n\n  // 获取当前步骤的棋盘状态\n  const currentSquares = history[currentMove];\n\n  // 计算当前游戏状态\n  const winner = calculateWinner(currentSquares);\n  const xIsNextCurrent = currentMove % 2 === 0; // 根据当前步骤索引计算下一位玩家\n\n  // 处理玩家移动\n  function handlePlay(nextSquares) {\n    // 创建新的历史记录：保留当前步骤之前的历史，添加新的棋盘状态\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory); // 更新历史记录\n    setCurrentMove(nextHistory.length - 1); // 更新当前步骤索引\n    setXIsNext(!xIsNext); // 切换玩家\n  }\n\n  // 处理时光旅行 - 跳转到指定步骤\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove); // 更新当前查看的步骤\n    setXIsNext(nextMove % 2 === 0); // 根据步骤索引设置下一位玩家\n  }\n\n  // 生成移动历史记录列表\n  function generateMoveHistory() {\n    // 根据排序设置决定历史记录遍历顺序\n    const movesToRender = isAscending ? history : [...history].reverse(); // 创建副本并反转数组\n\n    const moveIndices = isAscending ? Array.from({\n      length: history.length\n    }, (_, i) => i) : Array.from({\n      length: history.length\n    }, (_, i) => history.length - 1 - i);\n    return movesToRender.map((squares, moveIndex) => {\n      const actualMoveIndex = isAscending ? moveIndex : history.length - 1 - moveIndex;\n      let description;\n      if (actualMoveIndex > 0) {\n        // 非初始步骤：显示移动编号和位置信息\n        const row = Math.floor(actualMoveIndex / 3) + 1; // 计算行号（人为简化显示）\n        const col = actualMoveIndex % 3 + 1; // 计算列号（人为简化显示）\n        description = `移动 #${actualMoveIndex} (行${row}, 列${col})`;\n      } else {\n        // 初始步骤\n        description = '游戏开始';\n      }\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(actualMoveIndex),\n          className: actualMoveIndex === currentMove ? 'current-move' : '',\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)\n      }, actualMoveIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  // 计算获胜的三个方块索引（用于高亮显示）\n  function getWinningLine() {\n    const win = calculateWinner(currentSquares);\n    if (!win) return null;\n\n    // 定义所有可能的获胜组合及其对应的方块索引\n    const winPatterns = {\n      [0]: [0, 1, 2],\n      // 第一行\n      [1]: [3, 4, 5],\n      // 第二行\n      [2]: [6, 7, 8],\n      // 第三行\n      [3]: [0, 3, 6],\n      // 第一列\n      [4]: [1, 4, 7],\n      // 第二列\n      [5]: [2, 5, 8],\n      // 第三列\n      [6]: [0, 4, 8],\n      // 主对角线\n      [7]: [2, 4, 6] // 副对角线\n    };\n\n    // 遍历所有获胜组合，找到匹配的获胜者\n    for (const [patternIndex, indices] of Object.entries(winPatterns)) {\n      const [a, b, c] = indices.map(Number);\n      if (currentSquares[a] && currentSquares[a] === currentSquares[b] && currentSquares[a] === currentSquares[c]) {\n        return indices; // 返回获胜的三个方块索引\n      }\n    }\n    return null;\n  }\n  const winningLine = getWinningLine();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNextCurrent,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        winningLine: winningLine // 传递获胜线信息用于高亮\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u79FB\\u52A8\\u5386\\u53F2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsAscending(!isAscending),\n          className: \"sort-button\",\n          children: isAscending ? '↓ 降序排列' : '↑ 升序排列'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: generateMoveHistory()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"f8/JYvv+WCtRi0vFAQ5RRGrMac0=\");\n_c3 = Game;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","isWinning","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","winningLine","handleClick","i","calculateWinner","nextSquares","slice","renderSquare","isWinningSquare","includes","status","Array","fill","map","_","rowIndex","colIndex","squareIndex","winner","_c2","lines","length","a","b","c","Game","_s","setXIsNext","history","setHistory","currentMove","setCurrentMove","isAscending","setIsAscending","currentSquares","xIsNextCurrent","handlePlay","nextHistory","jumpTo","nextMove","generateMoveHistory","movesToRender","reverse","moveIndices","from","moveIndex","actualMoveIndex","description","row","Math","floor","col","getWinningLine","win","winPatterns","patternIndex","indices","Object","entries","Number","_c3","$RefreshReg$"],"sources":["D:/project/ticgame/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './styles.css';\n\n// 方块组件 - 代表井字棋盘中的单个格子\nfunction Square({ value, onSquareClick, isWinning }) {\n  // isWinning: 是否是获胜组合中的方块，用于高亮显示\n  return (\n    <button \n      className={`square ${isWinning ? 'winning-square' : ''}`} // 动态添加获胜方块样式类\n      onClick={onSquareClick} // 点击事件处理\n    >\n      {value} {/* 显示方块内容：X、O 或空 */}\n    </button>\n  );\n}\n\n// 棋盘组件 - 管理3x3的方格布局和游戏逻辑\nfunction Board({ xIsNext, squares, onPlay, winningLine }) {\n  // winningLine: 获胜的三个方块索引数组，用于高亮显示\n  \n  // 处理方块点击事件\n  function handleClick(i) {\n    // 如果游戏已结束（有获胜者）或方块已被占用，则不做任何操作\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    \n    // 创建当前方块状态的副本（不可变性原则）\n    const nextSquares = squares.slice();\n    \n    // 根据当前玩家设置方块值\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    \n    // 通知父组件更新游戏状态\n    onPlay(nextSquares);\n  }\n\n  // 渲染单个方块 - 使用循环替代硬编码\n  function renderSquare(i) {\n    // 检查当前方块是否属于获胜组合\n    const isWinningSquare = winningLine && winningLine.includes(i);\n    return (\n      <Square \n        key={i} // React列表渲染必需的key属性\n        value={squares[i]} // 方块显示的值\n        onSquareClick={() => handleClick(i)} // 点击事件处理函数\n        isWinning={isWinningSquare} // 是否为获胜方块\n      />\n    );\n  }\n\n  // 使用嵌套循环渲染3x3棋盘（更优雅的实现方式）\n  return (\n    <>\n      {/* 游戏状态显示区域 */}\n      <div className=\"status\">{status}</div>\n      \n      {/* 棋盘行 - 使用循环生成 */}\n      {Array(3).fill(null).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"board-row\">\n          {/* 每行包含3个方块 */}\n          {Array(3).fill(null).map((_, colIndex) => {\n            const squareIndex = rowIndex * 3 + colIndex; // 计算方块在一维数组中的索引\n            return renderSquare(squareIndex); // 渲染单个方块\n          })}\n        </div>\n      ))}\n    </>\n  );\n  \n  // 计算当前游戏状态文本\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = '获胜者: ' + winner;\n  } else {\n    status = '下一位玩家: ' + (xIsNext ? 'X' : 'O');\n  }\n}\n\n// 辅助函数：计算井字棋获胜者\nfunction calculateWinner(squares) {\n  // 所有可能的获胜组合：横行、竖列、对角线\n  const lines = [\n    [0, 1, 2], // 第一行\n    [3, 4, 5], // 第二行\n    [6, 7, 8], // 第三行\n    [0, 3, 6], // 第一列\n    [1, 4, 7], // 第二列\n    [2, 5, 8], // 第三列\n    [0, 4, 8], // 主对角线\n    [2, 4, 6], // 副对角线\n  ];\n  \n  // 遍历所有可能的获胜组合\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]; // 解构赋值获取三个方块索引\n    \n    // 检查三个方块是否都有相同的非空值\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // 返回获胜者（X 或 O）\n    }\n  }\n  \n  return null; // 没有获胜者\n}\n\n// 游戏主组件 - 管理整个游戏状态和历史记录\nexport default function Game() {\n  // 游戏状态管理\n  const [xIsNext, setXIsNext] = useState(true); // 下一位玩家是否为X\n  const [history, setHistory] = useState([Array(9).fill(null)]); // 游戏历史记录，初始为空棋盘\n  const [currentMove, setCurrentMove] = useState(0); // 当前查看的历史步骤\n  const [isAscending, setIsAscending] = useState(true); // 移动历史排序方式：true=升序，false=降序\n\n  // 获取当前步骤的棋盘状态\n  const currentSquares = history[currentMove];\n  \n  // 计算当前游戏状态\n  const winner = calculateWinner(currentSquares);\n  const xIsNextCurrent = currentMove % 2 === 0; // 根据当前步骤索引计算下一位玩家\n  \n  // 处理玩家移动\n  function handlePlay(nextSquares) {\n    // 创建新的历史记录：保留当前步骤之前的历史，添加新的棋盘状态\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory); // 更新历史记录\n    setCurrentMove(nextHistory.length - 1); // 更新当前步骤索引\n    setXIsNext(!xIsNext); // 切换玩家\n  }\n\n  // 处理时光旅行 - 跳转到指定步骤\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove); // 更新当前查看的步骤\n    setXIsNext(nextMove % 2 === 0); // 根据步骤索引设置下一位玩家\n  }\n\n  // 生成移动历史记录列表\n  function generateMoveHistory() {\n    // 根据排序设置决定历史记录遍历顺序\n    const movesToRender = isAscending \n      ? history \n      : [...history].reverse(); // 创建副本并反转数组\n    \n    const moveIndices = isAscending \n      ? Array.from({length: history.length}, (_, i) => i) \n      : Array.from({length: history.length}, (_, i) => history.length - 1 - i);\n\n    return movesToRender.map((squares, moveIndex) => {\n      const actualMoveIndex = isAscending ? moveIndex : history.length - 1 - moveIndex;\n      let description;\n      \n      if (actualMoveIndex > 0) {\n        // 非初始步骤：显示移动编号和位置信息\n        const row = Math.floor(actualMoveIndex / 3) + 1; // 计算行号（人为简化显示）\n        const col = (actualMoveIndex % 3) + 1; // 计算列号（人为简化显示）\n        description = `移动 #${actualMoveIndex} (行${row}, 列${col})`;\n      } else {\n        // 初始步骤\n        description = '游戏开始';\n      }\n      \n      return (\n        <li key={actualMoveIndex}>\n          <button \n            onClick={() => jumpTo(actualMoveIndex)}\n            className={actualMoveIndex === currentMove ? 'current-move' : ''}\n          >\n            {description}\n          </button>\n        </li>\n      );\n    });\n  }\n\n  // 计算获胜的三个方块索引（用于高亮显示）\n  function getWinningLine() {\n    const win = calculateWinner(currentSquares);\n    if (!win) return null;\n    \n    // 定义所有可能的获胜组合及其对应的方块索引\n    const winPatterns = {\n      [0]: [0, 1, 2], // 第一行\n      [1]: [3, 4, 5], // 第二行\n      [2]: [6, 7, 8], // 第三行\n      [3]: [0, 3, 6], // 第一列\n      [4]: [1, 4, 7], // 第二列\n      [5]: [2, 5, 8], // 第三列\n      [6]: [0, 4, 8], // 主对角线\n      [7]: [2, 4, 6], // 副对角线\n    };\n    \n    // 遍历所有获胜组合，找到匹配的获胜者\n    for (const [patternIndex, indices] of Object.entries(winPatterns)) {\n      const [a, b, c] = indices.map(Number);\n      if (currentSquares[a] && \n          currentSquares[a] === currentSquares[b] && \n          currentSquares[a] === currentSquares[c]) {\n        return indices; // 返回获胜的三个方块索引\n      }\n    }\n    \n    return null;\n  }\n\n  const winningLine = getWinningLine();\n\n  return (\n    <div className=\"game\">\n      {/* 游戏棋盘区域 */}\n      <div className=\"game-board\">\n        <Board \n          xIsNext={xIsNextCurrent} \n          squares={currentSquares} \n          onPlay={handlePlay}\n          winningLine={winningLine} // 传递获胜线信息用于高亮\n        />\n      </div>\n      \n      {/* 游戏信息区域 */}\n      <div className=\"game-info\">\n        {/* 移动历史记录列表 */}\n        <div className=\"move-history\">\n          <h3>移动历史</h3>\n          {/* 排序切换按钮 */}\n          <button \n            onClick={() => setIsAscending(!isAscending)}\n            className=\"sort-button\"\n          >\n            {isAscending ? '↓ 降序排列' : '↑ 升序排列'}\n          </button>\n          {/* 移动历史列表 */}\n          <ol>{generateMoveHistory()}</ol>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}