{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\ticgame\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './styles.css';\n\n// 方块组件 - 代表井字棋盘中的单个格子\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick,\n  isWinning\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `square ${isWinning ? 'winning-square' : ''}`,\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n// 棋盘组件 - 管理3x3的方格布局\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  winningLine\n}) {\n  // 处理方块点击事件\n  function handleClick(i) {\n    // 如果游戏已结束（有获胜者或平局）或方块已被占用，则不做任何操作\n    if (calculateWinner(squares) || isBoardFull(squares) || squares[i]) {\n      return;\n    }\n\n    // 创建当前方块状态的副本\n    const nextSquares = squares.slice();\n\n    // 根据当前玩家设置方块值\n    if (xIsNext) {\n      nextSquares[i] = 'X'; // X玩家下棋\n    } else {\n      nextSquares[i] = 'O'; // O玩家下棋\n    }\n\n    // 通知父组件更新游戏状态\n    onPlay(nextSquares);\n  }\n\n  // 渲染单个方块\n  function renderSquare(i) {\n    const isWinningSquare = winningLine && winningLine.includes(i);\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i],\n      onSquareClick: () => handleClick(i),\n      isWinning: isWinningSquare\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row top-row\",\n        children: [renderSquare(0), \" \", renderSquare(1), \" \", renderSquare(2), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row middle-row\",\n        children: [renderSquare(3), \" \", renderSquare(4), \" \", renderSquare(5), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row bottom-row\",\n        children: [renderSquare(6), \" \", renderSquare(7), \" \", renderSquare(8), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  // 计算游戏状态文本\n  function calculateGameStatus() {\n    const winner = calculateWinner(squares);\n    if (winner) {\n      return '获胜者: ' + winner; // 显示获胜者 X 或 O\n    } else if (isBoardFull(squares)) {\n      return '平局！'; // 显示平局\n    } else {\n      return '下一位玩家: ' + (xIsNext ? 'X' : 'O'); // 显示下一位玩家\n    }\n  }\n\n  // 使用计算的状态\n  const winner = calculateWinner(squares);\n  const isBoardFilled = isBoardFull(squares);\n  const status = calculateGameStatus();\n}\n\n// 修正：将计算函数移到组件外部，避免重复定义\n// 辅助函数：计算获胜者\n_c2 = Board;\nfunction calculateWinner(squares) {\n  // 所有可能的获胜组合：横行、竖列、对角线\n  const lines = [[0, 1, 2],\n  // 第一行 (最上面一行)\n  [3, 4, 5],\n  // 第二行 (中间一行)\n  [6, 7, 8],\n  // 第三行 (最下面一行)\n  [0, 3, 6],\n  // 第一列 (最左边一列)\n  [1, 4, 7],\n  // 第二列 (中间一列)\n  [2, 5, 8],\n  // 第三列 (最右边一列)\n  [0, 4, 8],\n  // 主对角线 (左上到右下)\n  [2, 4, 6] // 副对角线 (右上到左下)\n  ];\n\n  // 遍历所有可能的获胜组合\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    // 检查三个方块是否都有相同的非空值\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // 返回获胜者：X 或 O\n    }\n  }\n  return null; // 没有获胜者\n}\n\n// 辅助函数：检测棋盘是否已满（平局检测）\nfunction isBoardFull(squares) {\n  return squares.every(square => square !== null);\n}\n\n// 游戏主组件 - 管理整个游戏状态和历史记录\nexport default function Game() {\n  _s();\n  // 游戏状态管理\n  const [xIsNext, setXIsNext] = useState(true); // 下一位玩家是否为X\n  const [history, setHistory] = useState([Array(9).fill(null)]); // 游戏历史记录\n  const [currentMove, setCurrentMove] = useState(0); // 当前查看的历史步骤\n  const [isAscending, setIsAscending] = useState(true); // 移动历史排序方式\n  const [scores, setScores] = useState({\n    X: 0,\n    O: 0,\n    平局: 0\n  }); // 分数统计\n\n  // 获取当前步骤的棋盘状态\n  const currentSquares = history[currentMove];\n\n  // 计算游戏状态\n  const winner = calculateWinner(currentSquares);\n  const isBoardFilled = isBoardFull(currentSquares);\n\n  // 计算当前游戏状态文本\n  let status;\n  if (winner) {\n    status = '获胜者: ' + winner;\n  } else if (isBoardFilled) {\n    status = '平局！';\n  } else {\n    status = '下一位玩家: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  // 处理玩家移动\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n\n    // 更新分数统计\n    if (winner) {\n      setScores(prevScores => ({\n        ...prevScores,\n        [winner]: prevScores[winner] + 1\n      }));\n    } else if (isBoardFilled) {\n      setScores(prevScores => ({\n        ...prevScores,\n        平局: prevScores.平局 + 1\n      }));\n    }\n  }\n\n  // 处理时光旅行 - 跳转到指定步骤\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n\n  // 生成移动历史记录列表\n  function generateMoveHistory() {\n    const movesToRender = isAscending ? history : [...history].reverse();\n    const moveIndices = isAscending ? Array.from({\n      length: history.length\n    }, (_, i) => i) : Array.from({\n      length: history.length\n    }, (_, i) => history.length - 1 - i);\n    return movesToRender.map((squares, moveIndex) => {\n      const actualMoveIndex = isAscending ? moveIndex : history.length - 1 - moveIndex;\n      let description;\n      if (actualMoveIndex === 0) {\n        description = '游戏开始';\n      } else {\n        // 正确的行列显示：最上面是第一行，最下面是第三行\n        const row = Math.floor((actualMoveIndex - 1) / 3) + 1; // 行号：1(最上) - 3(最下)\n        const col = (actualMoveIndex - 1) % 3 + 1; // 列号：1(最左) - 3(最右)\n        description = `移动 #${actualMoveIndex}: ${xIsNext ? 'O' : 'X'} 下在 (第${row}行, 第${col}列)`;\n      }\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(actualMoveIndex),\n          className: actualMoveIndex === currentMove ? 'current-move' : '',\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, actualMoveIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  // 计算获胜的三个方块索引（用于高亮显示）\n  function getWinningLine() {\n    const win = calculateWinner(currentSquares);\n    if (!win) return null;\n    const winPatterns = {\n      0: [0, 1, 2],\n      // 第一行 (最上面一行)\n      1: [3, 4, 5],\n      // 第二行 (中间一行)\n      2: [6, 7, 8],\n      // 第三行 (最下面一行)\n      3: [0, 3, 6],\n      // 第一列 (最左边一列)\n      4: [1, 4, 7],\n      // 第二列 (中间一列)\n      5: [2, 5, 8],\n      // 第三列 (最右边一列)\n      6: [0, 4, 8],\n      // 主对角线 (左上到右下)\n      7: [2, 4, 6] // 副对角线 (右上到左下)\n    };\n    for (const [patternIndex, indices] of Object.entries(winPatterns)) {\n      const [a, b, c] = indices.map(Number);\n      if (currentSquares[a] && currentSquares[a] === currentSquares[b] && currentSquares[a] === currentSquares[c]) {\n        return indices;\n      }\n    }\n    return null;\n  }\n  const winningLine = getWinningLine();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u4E95\\u5B57\\u68CB\\u6E38\\u620F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scores\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\uD83D\\uDD34 X \\u73A9\\u5BB6: \", scores.X, \" \\u5206\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\uD83D\\uDD35 O \\u73A9\\u5BB6: \", scores.O, \" \\u5206\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u26AA \\u5E73\\u5C40: \", scores.平局, \" \\u6B21\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          xIsNext: xIsNext,\n          squares: currentSquares,\n          onPlay: handlePlay,\n          winningLine: winningLine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"move-history\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\u79FB\\u52A8\\u5386\\u53F2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsAscending(!isAscending),\n            className: \"sort-button\",\n            children: isAscending ? '↓ 降序排列' : '↑ 升序排列'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            children: generateMoveHistory()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"6DiQZRHUr7zY2lUBwSV7lcnXXdo=\");\n_c3 = Game;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","isWinning","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","winningLine","handleClick","i","calculateWinner","isBoardFull","nextSquares","slice","renderSquare","isWinningSquare","includes","status","calculateGameStatus","winner","isBoardFilled","_c2","lines","length","a","b","c","every","square","Game","_s","setXIsNext","history","setHistory","Array","fill","currentMove","setCurrentMove","isAscending","setIsAscending","scores","setScores","X","O","平局","currentSquares","handlePlay","nextHistory","prevScores","jumpTo","nextMove","generateMoveHistory","movesToRender","reverse","moveIndices","from","_","map","moveIndex","actualMoveIndex","description","row","Math","floor","col","getWinningLine","win","winPatterns","patternIndex","indices","Object","entries","Number","_c3","$RefreshReg$"],"sources":["D:/project/ticgame/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './styles.css';\n\n// 方块组件 - 代表井字棋盘中的单个格子\nfunction Square({ value, onSquareClick, isWinning }) {\n  return (\n    <button \n      className={`square ${isWinning ? 'winning-square' : ''}`}\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n}\n\n// 棋盘组件 - 管理3x3的方格布局\nfunction Board({ xIsNext, squares, onPlay, winningLine }) {\n  // 处理方块点击事件\n  function handleClick(i) {\n    // 如果游戏已结束（有获胜者或平局）或方块已被占用，则不做任何操作\n    if (calculateWinner(squares) || isBoardFull(squares) || squares[i]) {\n      return;\n    }\n    \n    // 创建当前方块状态的副本\n    const nextSquares = squares.slice();\n    \n    // 根据当前玩家设置方块值\n    if (xIsNext) {\n      nextSquares[i] = 'X'; // X玩家下棋\n    } else {\n      nextSquares[i] = 'O'; // O玩家下棋\n    }\n    \n    // 通知父组件更新游戏状态\n    onPlay(nextSquares);\n  }\n\n  // 渲染单个方块\n  function renderSquare(i) {\n    const isWinningSquare = winningLine && winningLine.includes(i);\n    return (\n      <Square \n        key={i}\n        value={squares[i]} \n        onSquareClick={() => handleClick(i)}\n        isWinning={isWinningSquare}\n      />\n    );\n  }\n\n  return (\n    <>\n      {/* 游戏状态显示 - 显示当前玩家或游戏结果 */}\n      <div className=\"status\">{status}</div>\n      \n      {/* 棋盘 - 3x3网格，最上面是第一行，最下面是第三行 */}\n      <div className=\"board\">\n        {/* 第一行 (索引0-2) - 最上面一行 */}\n        <div className=\"board-row top-row\">\n          {renderSquare(0)} {/* 第一行第一列 */}\n          {renderSquare(1)} {/* 第一行第二列 */}\n          {renderSquare(2)} {/* 第一行第三列 */}\n        </div>\n        \n        {/* 第二行 (索引3-5) - 中间一行 */}\n        <div className=\"board-row middle-row\">\n          {renderSquare(3)} {/* 第二行第一列 */}\n          {renderSquare(4)} {/* 第二行第二列 */}\n          {renderSquare(5)} {/* 第二行第三列 */}\n        </div>\n        \n        {/* 第三行 (索引6-8) - 最下面一行 */}\n        <div className=\"board-row bottom-row\">\n          {renderSquare(6)} {/* 第三行第一列 */}\n          {renderSquare(7)} {/* 第三行第二列 */}\n          {renderSquare(8)} {/* 第三行第三列 */}\n        </div>\n      </div>\n    </>\n  );\n\n  // 计算游戏状态文本\n  function calculateGameStatus() {\n    const winner = calculateWinner(squares);\n    \n    if (winner) {\n      return '获胜者: ' + winner; // 显示获胜者 X 或 O\n    } else if (isBoardFull(squares)) {\n      return '平局！'; // 显示平局\n    } else {\n      return '下一位玩家: ' + (xIsNext ? 'X' : 'O'); // 显示下一位玩家\n    }\n  }\n\n  // 使用计算的状态\n  const winner = calculateWinner(squares);\n  const isBoardFilled = isBoardFull(squares);\n  const status = calculateGameStatus();\n}\n\n// 修正：将计算函数移到组件外部，避免重复定义\n// 辅助函数：计算获胜者\nfunction calculateWinner(squares) {\n  // 所有可能的获胜组合：横行、竖列、对角线\n  const lines = [\n    [0, 1, 2], // 第一行 (最上面一行)\n    [3, 4, 5], // 第二行 (中间一行)\n    [6, 7, 8], // 第三行 (最下面一行)\n    [0, 3, 6], // 第一列 (最左边一列)\n    [1, 4, 7], // 第二列 (中间一列)\n    [2, 5, 8], // 第三列 (最右边一列)\n    [0, 4, 8], // 主对角线 (左上到右下)\n    [2, 4, 6], // 副对角线 (右上到左下)\n  ];\n  \n  // 遍历所有可能的获胜组合\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    \n    // 检查三个方块是否都有相同的非空值\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // 返回获胜者：X 或 O\n    }\n  }\n  \n  return null; // 没有获胜者\n}\n\n// 辅助函数：检测棋盘是否已满（平局检测）\nfunction isBoardFull(squares) {\n  return squares.every(square => square !== null);\n}\n\n// 游戏主组件 - 管理整个游戏状态和历史记录\nexport default function Game() {\n  // 游戏状态管理\n  const [xIsNext, setXIsNext] = useState(true); // 下一位玩家是否为X\n  const [history, setHistory] = useState([Array(9).fill(null)]); // 游戏历史记录\n  const [currentMove, setCurrentMove] = useState(0); // 当前查看的历史步骤\n  const [isAscending, setIsAscending] = useState(true); // 移动历史排序方式\n  const [scores, setScores] = useState({ X: 0, O: 0, 平局: 0 }); // 分数统计\n\n  // 获取当前步骤的棋盘状态\n  const currentSquares = history[currentMove];\n  \n  // 计算游戏状态\n  const winner = calculateWinner(currentSquares);\n  const isBoardFilled = isBoardFull(currentSquares);\n  \n  // 计算当前游戏状态文本\n  let status;\n  if (winner) {\n    status = '获胜者: ' + winner;\n  } else if (isBoardFilled) {\n    status = '平局！';\n  } else {\n    status = '下一位玩家: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  // 处理玩家移动\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n    \n    // 更新分数统计\n    if (winner) {\n      setScores(prevScores => ({\n        ...prevScores,\n        [winner]: prevScores[winner] + 1\n      }));\n    } else if (isBoardFilled) {\n      setScores(prevScores => ({\n        ...prevScores,\n        平局: prevScores.平局 + 1\n      }));\n    }\n  }\n\n  // 处理时光旅行 - 跳转到指定步骤\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n\n  // 生成移动历史记录列表\n  function generateMoveHistory() {\n    const movesToRender = isAscending ? history : [...history].reverse();\n    const moveIndices = isAscending \n      ? Array.from({length: history.length}, (_, i) => i) \n      : Array.from({length: history.length}, (_, i) => history.length - 1 - i);\n\n    return movesToRender.map((squares, moveIndex) => {\n      const actualMoveIndex = isAscending ? moveIndex : history.length - 1 - moveIndex;\n      let description;\n      \n      if (actualMoveIndex === 0) {\n        description = '游戏开始';\n      } else {\n        // 正确的行列显示：最上面是第一行，最下面是第三行\n        const row = Math.floor((actualMoveIndex - 1) / 3) + 1; // 行号：1(最上) - 3(最下)\n        const col = ((actualMoveIndex - 1) % 3) + 1; // 列号：1(最左) - 3(最右)\n        description = `移动 #${actualMoveIndex}: ${xIsNext ? 'O' : 'X'} 下在 (第${row}行, 第${col}列)`;\n      }\n      \n      return (\n        <li key={actualMoveIndex}>\n          <button \n            onClick={() => jumpTo(actualMoveIndex)}\n            className={actualMoveIndex === currentMove ? 'current-move' : ''}\n          >\n            {description}\n          </button>\n        </li>\n      );\n    });\n  }\n\n  // 计算获胜的三个方块索引（用于高亮显示）\n  function getWinningLine() {\n    const win = calculateWinner(currentSquares);\n    if (!win) return null;\n\n    const winPatterns = {\n      0: [0, 1, 2], // 第一行 (最上面一行)\n      1: [3, 4, 5], // 第二行 (中间一行)\n      2: [6, 7, 8], // 第三行 (最下面一行)\n      3: [0, 3, 6], // 第一列 (最左边一列)\n      4: [1, 4, 7], // 第二列 (中间一列)\n      5: [2, 5, 8], // 第三列 (最右边一列)\n      6: [0, 4, 8], // 主对角线 (左上到右下)\n      7: [2, 4, 6]  // 副对角线 (右上到左下)\n    };\n\n    for (const [patternIndex, indices] of Object.entries(winPatterns)) {\n      const [a, b, c] = indices.map(Number);\n      if (currentSquares[a] && \n          currentSquares[a] === currentSquares[b] && \n          currentSquares[a] === currentSquares[c]) {\n        return indices;\n      }\n    }\n    return null;\n  }\n\n  const winningLine = getWinningLine();\n\n  return (\n    <div className=\"game\">\n      {/* 游戏信息头部 - 显示分数 */}\n      <div className=\"game-header\">\n        <h2>井字棋游戏</h2>\n        <div className=\"scores\">\n          <span>🔴 X 玩家: {scores.X} 分</span>\n          <span>🔵 O 玩家: {scores.O} 分</span>\n          <span>⚪ 平局: {scores.平局} 次</span>\n        </div>\n      </div>\n      \n      {/* 游戏主体 */}\n      <div className=\"game-main\">\n        {/* 游戏棋盘区域 */}\n        <div className=\"game-board\">\n          <Board \n            xIsNext={xIsNext} \n            squares={currentSquares} \n            onPlay={handlePlay}\n            winningLine={winningLine}\n          />\n        </div>\n        \n        {/* 游戏信息区域 */}\n        <div className=\"game-info\">\n          <div className=\"move-history\">\n            <h3>移动历史</h3>\n            {/* 排序切换按钮 */}\n            <button \n              onClick={() => setIsAscending(!isAscending)}\n              className=\"sort-button\"\n            >\n              {isAscending ? '↓ 降序排列' : '↑ 升序排列'}\n            </button>\n            {/* 移动历史列表 */}\n            <ol>{generateMoveHistory()}</ol>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}