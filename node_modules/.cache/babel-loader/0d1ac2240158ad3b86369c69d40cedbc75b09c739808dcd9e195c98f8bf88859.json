{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\ticgame\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './styles.css';\n\n// 方块组件 - 代表井字棋盘中的单个格子\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick,\n  isWinning\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `square ${isWinning ? 'winning-square' : ''}`,\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n// 棋盘组件 - 管理3x3的方格布局和游戏逻辑\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  winningLine\n}) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n  function renderSquare(i) {\n    const isWinningSquare = winningLine && winningLine.includes(i);\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i],\n      onSquareClick: () => handleClick(i),\n      isWinning: isWinningSquare\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), Array(3).fill(null).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: Array(3).fill(null).map((_, colIndex) => {\n        const squareIndex = rowIndex * 3 + colIndex;\n        return renderSquare(squareIndex);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n\n  // 计算游戏状态（在组件内部以便访问最新props）\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = '获胜者: ' + winner;\n  } else if (isBoardFull(squares)) {\n    status = '平局！'; // 添加平局状态显示\n  } else {\n    status = '下一位玩家: ' + (xIsNext ? 'X' : 'O');\n  }\n}\n\n// 辅助函数：计算获胜者\n_c2 = Board;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n  // 横行\n  [0, 3, 6], [1, 4, 7], [2, 5, 8],\n  // 竖列\n  [0, 4, 8], [2, 4, 6] // 对角线\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// 辅助函数：检测棋盘是否已满（平局检测）\nfunction isBoardFull(squares) {\n  return squares.every(square => square !== null);\n}\n\n// 游戏主组件\nexport default function Game() {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [isAscending, setIsAscending] = useState(true);\n  const currentSquares = history[currentMove];\n  const winner = calculateWinner(currentSquares);\n  const isBoardFilled = isBoardFull(currentSquares);\n\n  // 计算游戏状态\n  let status;\n  if (winner) {\n    status = '获胜者: ' + winner;\n  } else if (isBoardFilled) {\n    status = '平局！';\n  } else {\n    status = '下一位玩家: ' + (xIsNext ? 'X' : 'O');\n  }\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n  function generateMoveHistory() {\n    const movesToRender = isAscending ? history : [...history].reverse();\n    const moveIndices = isAscending ? Array.from({\n      length: history.length\n    }, (_, i) => i) : Array.from({\n      length: history.length\n    }, (_, i) => history.length - 1 - i);\n    return movesToRender.map((squares, moveIndex) => {\n      const actualMoveIndex = isAscending ? moveIndex : history.length - 1 - moveIndex;\n      let description;\n      if (actualMoveIndex === 0) {\n        description = '游戏开始';\n      } else {\n        // 修正坐标计算 - 现在显示正确的行列（1-3）\n        const row = Math.floor((actualMoveIndex - 1) / 3) + 1; // 1-3\n        const col = (actualMoveIndex - 1) % 3 + 1; // 1-3\n        description = `移动 #${actualMoveIndex} (第${row}行, 第${col}列)`;\n      }\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(actualMoveIndex),\n          className: actualMoveIndex === currentMove ? 'current-move' : '',\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, actualMoveIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this);\n    });\n  }\n  function getWinningLine() {\n    const win = calculateWinner(currentSquares);\n    if (!win) return null;\n    const winPatterns = {\n      0: [0, 1, 2],\n      // 第一行\n      1: [3, 4, 5],\n      // 第二行\n      2: [6, 7, 8],\n      // 第三行\n      3: [0, 3, 6],\n      // 第一列\n      4: [1, 4, 7],\n      // 第二列\n      5: [2, 5, 8],\n      // 第三列\n      6: [0, 4, 8],\n      // 主对角线\n      7: [2, 4, 6] // 副对角线\n    };\n    for (const [patternIndex, indices] of Object.entries(winPatterns)) {\n      const [a, b, c] = indices.map(Number);\n      if (currentSquares[a] && currentSquares[a] === currentSquares[b] && currentSquares[a] === currentSquares[c]) {\n        return indices;\n      }\n    }\n    return null;\n  }\n  const winningLine = getWinningLine();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        winningLine: winningLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u79FB\\u52A8\\u5386\\u53F2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsAscending(!isAscending),\n          className: \"sort-button\",\n          children: isAscending ? '↓ 降序排列' : '↑ 升序排列'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: generateMoveHistory()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"f8/JYvv+WCtRi0vFAQ5RRGrMac0=\");\n_c3 = Game;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","isWinning","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","winningLine","handleClick","i","calculateWinner","nextSquares","slice","renderSquare","isWinningSquare","includes","status","Array","fill","map","_","rowIndex","colIndex","squareIndex","winner","isBoardFull","_c2","lines","length","a","b","c","every","square","Game","_s","setXIsNext","history","setHistory","currentMove","setCurrentMove","isAscending","setIsAscending","currentSquares","isBoardFilled","handlePlay","nextHistory","jumpTo","nextMove","generateMoveHistory","movesToRender","reverse","moveIndices","from","moveIndex","actualMoveIndex","description","row","Math","floor","col","getWinningLine","win","winPatterns","patternIndex","indices","Object","entries","Number","_c3","$RefreshReg$"],"sources":["D:/project/ticgame/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './styles.css';\n\n// 方块组件 - 代表井字棋盘中的单个格子\nfunction Square({ value, onSquareClick, isWinning }) {\n  return (\n    <button \n      className={`square ${isWinning ? 'winning-square' : ''}`}\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n}\n\n// 棋盘组件 - 管理3x3的方格布局和游戏逻辑\nfunction Board({ xIsNext, squares, onPlay, winningLine }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  function renderSquare(i) {\n    const isWinningSquare = winningLine && winningLine.includes(i);\n    return (\n      <Square \n        key={i}\n        value={squares[i]}\n        onSquareClick={() => handleClick(i)}\n        isWinning={isWinningSquare}\n      />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {Array(3).fill(null).map((_, rowIndex) => (\n        <div key={rowIndex} className=\"board-row\">\n          {Array(3).fill(null).map((_, colIndex) => {\n            const squareIndex = rowIndex * 3 + colIndex;\n            return renderSquare(squareIndex);\n          })}\n        </div>\n      ))}\n    </>\n  );\n\n  // 计算游戏状态（在组件内部以便访问最新props）\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = '获胜者: ' + winner;\n  } else if (isBoardFull(squares)) {\n    status = '平局！'; // 添加平局状态显示\n  } else {\n    status = '下一位玩家: ' + (xIsNext ? 'X' : 'O');\n  }\n}\n\n// 辅助函数：计算获胜者\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], // 横行\n    [0, 3, 6], [1, 4, 7], [2, 5, 8], // 竖列\n    [0, 4, 8], [2, 4, 6] // 对角线\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// 辅助函数：检测棋盘是否已满（平局检测）\nfunction isBoardFull(squares) {\n  return squares.every(square => square !== null);\n}\n\n// 游戏主组件\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [isAscending, setIsAscending] = useState(true);\n\n  const currentSquares = history[currentMove];\n  const winner = calculateWinner(currentSquares);\n  const isBoardFilled = isBoardFull(currentSquares);\n  \n  // 计算游戏状态\n  let status;\n  if (winner) {\n    status = '获胜者: ' + winner;\n  } else if (isBoardFilled) {\n    status = '平局！';\n  } else {\n    status = '下一位玩家: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n\n  function generateMoveHistory() {\n    const movesToRender = isAscending ? history : [...history].reverse();\n    const moveIndices = isAscending \n      ? Array.from({length: history.length}, (_, i) => i) \n      : Array.from({length: history.length}, (_, i) => history.length - 1 - i);\n\n    return movesToRender.map((squares, moveIndex) => {\n      const actualMoveIndex = isAscending ? moveIndex : history.length - 1 - moveIndex;\n      let description;\n      \n      if (actualMoveIndex === 0) {\n        description = '游戏开始';\n      } else {\n        // 修正坐标计算 - 现在显示正确的行列（1-3）\n        const row = Math.floor((actualMoveIndex - 1) / 3) + 1; // 1-3\n        const col = ((actualMoveIndex - 1) % 3) + 1; // 1-3\n        description = `移动 #${actualMoveIndex} (第${row}行, 第${col}列)`;\n      }\n      \n      return (\n        <li key={actualMoveIndex}>\n          <button \n            onClick={() => jumpTo(actualMoveIndex)}\n            className={actualMoveIndex === currentMove ? 'current-move' : ''}\n          >\n            {description}\n          </button>\n        </li>\n      );\n    });\n  }\n\n  function getWinningLine() {\n    const win = calculateWinner(currentSquares);\n    if (!win) return null;\n\n    const winPatterns = {\n      0: [0, 1, 2], // 第一行\n      1: [3, 4, 5], // 第二行\n      2: [6, 7, 8], // 第三行\n      3: [0, 3, 6], // 第一列\n      4: [1, 4, 7], // 第二列\n      5: [2, 5, 8], // 第三列\n      6: [0, 4, 8], // 主对角线\n      7: [2, 4, 6]  // 副对角线\n    };\n\n    for (const [patternIndex, indices] of Object.entries(winPatterns)) {\n      const [a, b, c] = indices.map(Number);\n      if (currentSquares[a] && \n          currentSquares[a] === currentSquares[b] && \n          currentSquares[a] === currentSquares[c]) {\n        return indices;\n      }\n    }\n    return null;\n  }\n\n  const winningLine = getWinningLine();\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board \n          xIsNext={xIsNext} \n          squares={currentSquares} \n          onPlay={handlePlay}\n          winningLine={winningLine}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div className=\"move-history\">\n          <h3>移动历史</h3>\n          <button \n            onClick={() => setIsAscending(!isAscending)}\n            className=\"sort-button\"\n          >\n            {isAscending ? '↓ 降序排列' : '↑ 升序排列'}\n          </button>\n          <ol>{generateMoveHistory()}</ol>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}